%{
#include <stdio.h>
int total = 0;
%}


%%

#.*                                 { total++; printf("Preprocessor: %s\n", yytext); }
[;:(),{}._\[\]]                     { total++; printf("Delimiter: %s\n", yytext); }
[#@\$%\^&]                          { total++; printf("Special Char: %s\n", yytext); }

("=="|"!="|"<="|">="|"++"|"--"|"="|"<"|">"|"+"|"-"|"*"|"/"|"%"|"&&"|"||"|"!"|"and"|"or"|"not"|"nand"|"xor"|"nor"|"xnor") {total++; printf("Operator: %s\n", yytext);}

("char"|"const"|"do"|"double"|"else"|"enum"|"extern"|"float"|"for"|"goto"|"if"|"int"|"long"|"return"|"typedef"|"union"|"unsigned"|"void"|"volatile"|"while") {
total++; printf("Keyword: %s\n", yytext);
 }

[a-zA-Z_][a-zA-Z0-9_]*[ \t]*\(      { total++; printf("Function: %s\n", yytext); }
[a-zA-Z_][a-zA-Z0-9_]*              { total++; printf("Identifier: %s\n", yytext); }
[0-9]+\.[0-9]+                      { total++; printf("Float: %s\n", yytext); }
[0-9]+                              { total++; printf("Integer: %s\n", yytext); }
\"([^"\\]|\\.)*\"                   { total++; printf("String: %s\n", yytext); }
\/\/.*                              { total++; printf("Single-line Comment: %s\n", yytext); }
\/\*([^*]|\*+[^*/])*\*+\/           { total++; printf("Multi-line Comment: %s\n", yytext); }
[\t\n\r ]+                          { /* Skip whitespace */ }
.                                   { printf("Unknown: %s\n", yytext); }

%%

int main() {
    yyin = fopen("dhruvsample.c", "r");
    yylex();
    printf("\nTotal Tokens = %d\n", total);
    fclose(yyin);
    return 0;
}

/*Commands for compilation and execution*/
/*
gedit lex.l
lex lex.l
cc lex.yy.c -ll
./a.out
*/
